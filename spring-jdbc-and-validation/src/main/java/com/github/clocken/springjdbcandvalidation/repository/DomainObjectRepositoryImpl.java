/*
 * Copyright 2021 clocken
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.clocken.springjdbcandvalidation.repository;

import com.github.clocken.springjdbcandvalidation.domain.DomainObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of a {@link DomainObjectRepository} using Spring-JDBC's {@link NamedParameterJdbcTemplate}.
 * May be completely auto-generated by Spring-Data's repository abstraction - see: https://docs.spring.io/spring-data/jdbc/docs/current/reference/html/#repositories
 */
@Transactional
@Repository
public class DomainObjectRepositoryImpl implements DomainObjectRepository {

    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    /**
     * Dependency injection constructor.
     *
     * @param namedParameterJdbcTemplate The {@link NamedParameterJdbcTemplate} to be injected
     */
    @Autowired
    public DomainObjectRepositoryImpl(NamedParameterJdbcTemplate namedParameterJdbcTemplate) {
        this.namedParameterJdbcTemplate = namedParameterJdbcTemplate;
    }

    @Override
    public DomainObject save(DomainObject entity) {
        // This is where the NamedParameterJdbcTemplate shines:
        // When having a bean object at hand and just using its property names as parameter names. Clean and simple ;)
        namedParameterJdbcTemplate
                .update("merge into domain_object key(id) values(:id, :referencedId, :data, :date)",
                        new BeanPropertySqlParameterSource(entity));

        return entity;
    }

    @Override
    public Iterable<DomainObject> saveAll(Iterable<DomainObject> entities) {
        entities.forEach(this::save);

        return entities;
    }

    @Transactional(readOnly = true)
    @Override
    public Iterable<DomainObject> findAll() {
        return namedParameterJdbcTemplate
                .query("select id, referenced_id, data, date from domain_object",
                        new BeanPropertyRowMapper<>(DomainObject.class));
    }

    @Transactional(readOnly = true)
    @Override
    public DomainObject findById(Long id) {
        return namedParameterJdbcTemplate
                .queryForObject("select id, referenced_id, data, date from domain_object where id = :id",
                        new MapSqlParameterSource("id", id),
                        new BeanPropertyRowMapper<>(DomainObject.class));
    }

    @Override
    public void deleteById(Long id) {
        namedParameterJdbcTemplate
                .update("delete from domain_object where id = :id",
                        new MapSqlParameterSource("id", id));
    }
}
