/*
 * Copyright 2021 clocken
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.clocken.springjdbcandvalidation.repository;

import com.github.clocken.springjdbcandvalidation.domain.ReferencedDomainObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of a {@link ReferencedDomainObjectRepository} using Spring-JDBC's {@link NamedParameterJdbcTemplate}.
 * May be completely auto-generated by Spring-Data's repository abstraction - see: https://docs.spring.io/spring-data/jdbc/docs/current/reference/html/#repositories
 */
@Transactional
@Repository
public class ReferencedDomainObjectRepositoryImpl implements ReferencedDomainObjectRepository {

    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    /**
     * Dependency injection constructor.
     *
     * @param namedParameterJdbcTemplate {@link NamedParameterJdbcTemplate} to be injected
     */
    @Autowired
    public ReferencedDomainObjectRepositoryImpl(NamedParameterJdbcTemplate namedParameterJdbcTemplate) {
        this.namedParameterJdbcTemplate = namedParameterJdbcTemplate;
    }

    @Override
    public ReferencedDomainObject save(ReferencedDomainObject entity) {
        throw new UnsupportedOperationException("Not implemented!");
    }

    @Override
    public Iterable<ReferencedDomainObject> saveAll(Iterable<ReferencedDomainObject> entities) {
        throw new UnsupportedOperationException("Not implemented!");
    }

    @Transactional(readOnly = true)
    @Override
    public Iterable<ReferencedDomainObject> findAll() {
        return namedParameterJdbcTemplate
                .query("select id from referenced_domain_object",
                        new BeanPropertyRowMapper<>(ReferencedDomainObject.class));
    }

    @Transactional(readOnly = true)
    @Override
    public ReferencedDomainObject findById(Long aLong) {
        throw new UnsupportedOperationException("Not implemented!");
    }

    @Override
    public void deleteById(Long aLong) {
        throw new UnsupportedOperationException("Not implemented!");
    }
}
